---
alwaysApply: false
---

# Schema Form Plugin 개발을 위한 프롬프트

## 프롬프트 템플릿

```
새로운 UI 라이브러리 "[UI_LIBRARY_NAME]"을 사용하여 @canard/schema-form(이하 canard-form)의 플러그인을 개발하려고 합니다.

이 프롬프트와 별개로 사용자는 [UI_LIBRARY_NAME]과 그 Ui Library의 공식 문서(optional)를 제공할 것입니다.

이 플러그인은 JSON Schema를 전달받아 동적으로 폼을 렌더링하는 canard-form 시스템의 확장으로,
아래의 아키텍처 가이드라인과 요구사항을 준수해야 합니다.

[아래 가이드라인과 요구사항 참조]
```

## 패키지 이름 및 구조

- **패키지명**: `@canard/schema-form-{UI_LIBRARY_NAME}-plugin`
- **참조 구현**: `@canard/schema-form-mui-plugin` (MUI 구현체 참조)

## 핵심 아키텍처 원칙

### 1. 성능 최적화 우선 정책

**비제어 컴포넌트 우선 사용**

- `value` + `onChange` 대신 `defaultValue` + `onChange` 패턴 사용
- 불필요한 props 전파로 인한 리렌더링 방지
- 예외: 실시간 validation이나 조건부 렌더링이 필요한 경우에만 제어 컴포넌트 사용

**최적화 훅 활용**

```tsx
// 권장 패턴
const handleChange = useHandle((event) => onChange(event.target.value));
const computedProps = useMemo(() => ({ ... }), [dependencies]);
```

### 2. 타입 시스템 준수

**핵심 타입 구조**

```tsx
// FormTypeInputProps 완전한 구조
export interface FormTypeInputProps<
  Value extends AllowedValue = any,
  Context extends Dictionary = object,
  WatchValues extends Array<any> = Array<any>,
  Schema extends JsonSchemaWithVirtual = InferJsonSchema<Value>,
  Node extends SchemaNode = InferSchemaNode<Schema>,
> {
  /** JsonSchema of FormTypeInput Component */
  jsonSchema: Schema;
  /** ReadOnly state of FormTypeInput Component */
  readOnly: boolean;
  /** Disabled state of FormTypeInput Component */
  disabled: boolean;
  /** Whether the schema node assigned to FormTypeInput Component is required */
  required: boolean;
  /** Schema node assigned to FormTypeInput Component */
  node: Node;
  /** Name of schema node assigned to FormTypeInput Component */
  name: Node["name"];
  /** Path of schema node assigned to FormTypeInput Component */
  path: Node["path"];
  /** Errors of schema node assigned to FormTypeInput Component */
  errors: Node["errors"];
  /** Values subscribed according to `computed.watch`(=`&watch`) property defined in JsonSchema */
  watchValues: WatchValues;
  /** Default value of FormTypeInput Component */
  defaultValue: Value | undefined;
  /** Current value of FormTypeInput Component */
  value: Value;
  /** onChange handler of FormTypeInput Component */
  onChange: SetStateFnWithOptions<Value>;
  /** Child FormTypeInput Components of this FormTypeInput Component */
  ChildNodeComponents: WithKey<ComponentType<ChildFormTypeInputProps>>[];
  /** Style of FormTypeInput Component */
  style: CSSProperties | undefined;
  /** UserDefinedContext passed to Form */
  context: Context;
  /** Additional properties can be freely defined */
  [alt: string]: any;
}

// FormTypeRendererProps 완전한 구조
export interface FormTypeRendererProps extends OverridableFormTypeInputProps {
  /** Whether the schema node assigned to FormTypeInput Renderer Component is the root node */
  isRoot: boolean;
  /** Depth of the schema node assigned to FormTypeInput Renderer Component */
  depth: number;
  /** JsonSchema of the schema node assigned to FormTypeInput Renderer Component */
  jsonSchema: SchemaNode["jsonSchema"];
  /** Schema node assigned to FormTypeInput Renderer Component */
  node: SchemaNode;
  /** Type of the schema node assigned to FormTypeInput Renderer Component */
  type: SchemaNode["type"];
  /** Path of the schema node assigned to FormTypeInput Renderer Component */
  path: SchemaNode["path"];
  /** Name of the schema node assigned to FormTypeInput Renderer Component */
  name: SchemaNode["name"];
  /** Value of the schema node assigned to FormTypeInput Renderer Component */
  value: SchemaNode["value"];
  /** Errors of the schema node assigned to FormTypeInput Renderer Component */
  errors: SchemaNode["errors"];
  /** Whether the schema node assigned to FormTypeInput Renderer Component is required */
  required: SchemaNode["required"];
  /** Input component of the schema node assigned to FormTypeInput Renderer Component */
  Input: ComponentType<OverridableFormTypeInputProps>;
  /** Error message of the schema node assigned to FormTypeInput Renderer Component */
  errorMessage: ReactNode;
  /** Function to format error message of the schema node assigned to FormTypeInput Renderer Component */
  formatError: FormatError;
  /** User defined context of the schema node assigned to FormTypeInput Renderer Component */
  context: Dictionary;
  /** Additional props of the schema node assigned to FormTypeInput Renderer Component */
  [alt: string]: any;
}

// Test 조건 정의 (두 가지 방식 지원)
export type FormTypeTestFn = Fn<[hint: Hint], boolean>;

export type FormTypeTestObject = Partial<{
  /** JsonSchema['type'] | Array<JsonSchema['type']> */
  type: JsonSchemaType | JsonSchemaType[];
  /** SchemaNode['path'] | Array<SchemaNode['path']> */
  path: string | string[];
  /** JsonSchema */
  jsonSchema: JsonSchemaWithVirtual;
  /** JsonSchema['format'] | Array<JsonSchema['format']> */
  format: string | string[];
  /** JsonSchema['formType'] | Array<JsonSchema['formType']> */
  formType: string | string[];
}>;

export type Hint = {
  /** JsonSchema['type'] */
  type: JsonSchemaType;
  /** SchemaNode['path'] */
  path: string;
  /** JsonSchema */
  jsonSchema: JsonSchemaWithVirtual;
  /** JsonSchema['format'] */
  format?: string;
  /** JsonSchema['formType'] */
  formType?: string;
};

// FormTypeInputDefinition 구조
export type FormTypeInputDefinition<T = unknown> = {
  test: FormTypeTestFn | FormTypeTestObject;
  Component: ComponentType<InferFormTypeInputProps<T>>;
};

// SetStateFnWithOptions 구조
export type SetStateFnWithOptions<S = unknown> = (
  value: S | ((prevState: S) => S),
  options?: PublicSetValueOption,
) => void;
```

**UI 라이브러리별 Context 타입 정의**

```tsx
interface [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  // 라이브러리별 공통 속성들 (예: theme, variant 등)
}
```

**각 컴포넌트별 구체적인 타입 명시**

```tsx
// String 입력 컴포넌트
interface FormTypeInputStringProps
  extends FormTypeInputProps<string, [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  placeholder?: string;
}

export const FormTypeInputStringDefinition = {
  Component: FormTypeInputString,
  // 객체 형태 test
  test: { type: 'string' },
  // 또는 함수 형태 test
  // test: ({ type }: Hint) => type === 'string',
} satisfies FormTypeInputDefinition;

// Number 입력 컴포넌트
interface FormTypeInputNumberProps
  extends FormTypeInputProps<number, [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  formatter?: (value: number) => string;
  parser?: (value: string) => number;
  min?: number;
  max?: number;
  step?: number;
}

export const FormTypeInputNumberDefinition = {
  Component: FormTypeInputNumber,
  // 배열 형태로 여러 타입 지원
  test: { type: ['number', 'integer'] },
  // 또는 함수 형태 test
  // test: ({ type }: Hint) => type === 'number' || type === 'integer',
} satisfies FormTypeInputDefinition;

// Boolean 입력 컴포넌트
interface FormTypeInputBooleanProps
  extends FormTypeInputProps<boolean, [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  indeterminate?: boolean;
  label?: ReactNode;
  hideLabel?: boolean;
}

export const FormTypeInputBooleanDefinition = {
  Component: FormTypeInputBoolean,
  test: { type: 'boolean' },
} satisfies FormTypeInputDefinition;

// Array 구조 컴포넌트 (특수 처리)
interface FormTypeInputArrayProps
  extends FormTypeInputProps<any[], [LibraryName]Context>,
          [LibraryName]Context {
  // ChildNodeComponents는 FormTypeInputProps에서 제공됨
  // 추가/제거 버튼 스타일링만 UI 라이브러리별로 처리
}

export const FormTypeInputArrayDefinition = {
  Component: FormTypeInputArray,
  test: { type: 'array' },
} satisfies FormTypeInputDefinition;

// Enum 선택 컴포넌트 (복합 조건 예시)
interface FormTypeInputStringEnumProps
  extends FormTypeInputProps<string | string[], [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  mode?: 'single' | 'multiple';
  enumLabels?: Record<string, ReactNode>;
  placeholder?: string;
}

export const FormTypeInputStringEnumDefinition = {
  Component: FormTypeInputStringEnum,
  // 복합 조건은 함수 형태로 작성
  test: ({ type, jsonSchema }: Hint) =>
    (type === 'string' && jsonSchema.enum && jsonSchema.enum.length > 0) ||
    (type === 'array' &&
     jsonSchema.items?.type === 'string' &&
     jsonSchema.items?.enum &&
     jsonSchema.items.enum.length > 0),
} satisfies FormTypeInputDefinition;

// Radio 그룹 컴포넌트 (formType 조건 포함)
interface FormTypeInputRadioGroupProps
  extends FormTypeInputProps<string | number, [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  radioLabels?: Record<string | number, ReactNode>;
  direction?: 'horizontal' | 'vertical';
}

export const FormTypeInputRadioGroupDefinition = {
  Component: FormTypeInputRadioGroup,
  test: ({ type, formType, jsonSchema }: Hint) =>
    (type === 'string' || type === 'number' || type === 'integer') &&
    formType === 'radio' &&
    jsonSchema.enum &&
    jsonSchema.enum.length > 0,
} satisfies FormTypeInputDefinition;

// Password 입력 (format 조건 포함)
interface FormTypeInputPasswordProps
  extends FormTypeInputProps<string, [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  placeholder?: string;
  showPasswordToggle?: boolean;
}

export const FormTypeInputPasswordDefinition = {
  Component: FormTypeInputPassword,
  test: { type: 'string', format: 'password' },
} satisfies FormTypeInputDefinition;

// Textarea (format 또는 formType 조건)
interface FormTypeInputTextareaProps
  extends FormTypeInputProps<string, [LibraryName]Context>,
          [LibraryName]Context {
  size?: 'small' | 'medium' | 'large';
  minRows?: number;
  maxRows?: number;
  placeholder?: string;
}

export const FormTypeInputTextareaDefinition = {
  Component: FormTypeInputTextarea,
  test: { type: 'string', format: ['textarea'] },
  // 또는 formType도 지원
  // test: ({ type, format, formType }: Hint) =>
  //   type === 'string' && (format === 'textarea' || formType === 'textarea'),
} satisfies FormTypeInputDefinition;
```

### 3. 실제 구현 패턴 준수

**플러그인 구조 (SchemaFormPlugin 타입)**

```tsx
// src/index.ts
import type { SchemaFormPlugin } from "@canard/schema-form";

import { FormError } from "./components/FormError";
import { FormGroup } from "./components/FormGroup";
import { FormInput } from "./components/FormInput";
import { FormLabel } from "./components/FormLabel";
import { formatError } from "./components/formatError";
import { formTypeInputDefinitions } from "./formTypeInputs";

export const plugin = {
  FormGroup,
  FormLabel,
  FormInput,
  FormError,
  formatError,
  formTypeInputDefinitions,
} satisfies SchemaFormPlugin;

// SchemaFormPlugin 타입 구조
export interface SchemaFormPlugin {
  FormGroup?: ComponentType<FormTypeRendererProps>;
  FormLabel?: ComponentType<FormTypeRendererProps>;
  FormInput?: ComponentType<FormTypeRendererProps>;
  FormError?: ComponentType<FormTypeRendererProps>;
  formatError?: FormatError;
  formTypeInputDefinitions?: FormTypeInputDefinition[];
}
```

**FormTypeInputDefinitions 통합 (우선순위 순서 중요)**

```tsx
// src/formTypeInputs/index.ts
import type { FormTypeInputDefinition } from '@canard/schema-form';

import { FormTypeInput[Component1]Definition } from './FormTypeInput[Component1]';
import { FormTypeInput[Component2]Definition } from './FormTypeInput[Component2]';
// ... 모든 컴포넌트 import

export const formTypeInputDefinitions: FormTypeInputDefinition[] = [
  // ⚠️ 순서가 매우 중요! 더 구체적인 조건이 앞에 와야 함
  FormTypeInput[SpecificComponent]Definition,  // 특수한 조건 (format, formType 등)
  FormTypeInput[GeneralComponent]Definition,   // 일반적인 조건 (type만)
  // ...
];
```

**실제 컴포넌트 구현 패턴 (FormTypeInputTime 참조)**

```tsx
// FormTypeInputPropsWithSchema 사용
interface FormTypeInput[ComponentName]Props
  extends FormTypeInputPropsWithSchema<ValueType, CustomJsonSchema, [LibraryName]Context>,
          [LibraryName]Context {
  // 컴포넌트별 추가 props
  label?: ReactNode;
  [customProp]?: boolean;
  hideLabel?: boolean;
}

// 커스텀 JsonSchema 인터페이스 (필요시)
interface CustomJsonSchema extends [BaseSchema] {
  format: 'specific-format';
  customProperty?: boolean;
}

const FormTypeInput[ComponentName] = ({
  path,
  name,
  jsonSchema,
  required,
  disabled,
  defaultValue,
  onChange,
  context,
  // 직접 props
  label: labelProp,
  size: sizeProp = 'medium',
  customProp: customPropProp,
  hideLabel,
}: FormTypeInput[ComponentName]Props) => {
  // useMemo로 props 연산 최적화 (값 전달 우선순위 적용)
  const [label, size, customProp] = useMemo(() => {
    if (hideLabel) return [
      undefined,
      sizeProp || context.size,
      customPropProp ?? jsonSchema.customProperty ?? false,
    ];
    return [
      labelProp || jsonSchema.label || name,
      sizeProp || context.size,
      customPropProp ?? jsonSchema.customProperty ?? false,
    ];
  }, [jsonSchema, context, labelProp, name, sizeProp, customPropProp, hideLabel]);

  // 값 변환 로직 (필요시)
  const processedValue = useMemo(() => {
    // defaultValue 처리 로직
    return processValue(defaultValue);
  }, [defaultValue]);

  // useHandle로 이벤트 핸들러 최적화
  const handleChange = useHandle((newValue: ProcessedType) => {
    onChange(convertToSchemaValue(newValue));
  });

  // 래퍼 컴포넌트가 필요한 경우 (예: LocalizationProvider)
  return (
    <[WrapperComponent]>
      <[LibraryComponent]
        label={label}
        defaultValue={processedValue}
        onChange={handleChange}
        disabled={disabled}
        // UI 라이브러리별 특수 props
        slotProps={{
          [subComponent]: {
            id: path,
            name,
            required,
            size,
            // 기타 props
          },
        }}
        // 또는 직접 props
        id={path}
        name={name}
        required={required}
        size={size}
      />
    </[WrapperComponent]>
  );
};

export const FormTypeInput[ComponentName]Definition = {
  Component: FormTypeInput[ComponentName],
  test: { type: 'string', format: 'specific-format' },
  // 또는 복합 조건의 경우
  // test: ({ type, format, formType, jsonSchema }: Hint) =>
  //   type === 'string' && format === 'specific-format' && customCondition,
} satisfies FormTypeInputDefinition;
```

### 4. 의존성 관리 규칙

**package.json 설정 가이드**

```json
{
  "name": "@canard/schema-form-{UI_LIBRARY_NAME}-plugin",
  "dependencies": {
    "{UI_LIBRARY_MAIN_PACKAGE}": "^{LATEST_MAJOR}.0.0",
    "{UI_LIBRARY_SUB_PACKAGES}": "^{LATEST_MAJOR}.0.0",
    "@winglet/react-utils": "*",
    "@canard/schema-form": "*"
  },
  "peerDependencies": {
    "react": ">=18.0.0 <19.0.0",
    "{UI_LIBRARY_MAIN_PACKAGE}": ">={LATEST_MAJOR}.0.0",
    "{UI_LIBRARY_SUB_PACKAGES}": ">={LATEST_MAJOR}.0.0",
    "@emotion/react": "*",
    "@emotion/styled": "*"
  }
}
```

**의존성 규칙**:

1. **dependencies**: 적용된 라이브러리의 최신 메이저 버전을 모두 포함 (`^5.0.0` 형태)
2. **peerDependencies**: 해당 의존성 이상으로 설정 (`>=5.0.0` 형태)
3. **@winglet, @canard 내부 패키지**: `"*"` 또는 workspace 설정으로 처리
4. **React**: `">=18.0.0 <19.0.0"` (canard-form 호환성)

## 구현 요구사항 (조건 기반)

### 1. 기본 렌더러 컴포넌트 (필수)

모든 플러그인은 다음 5개 기본 컴포넌트를 구현해야 합니다:

#### FormGroup

- **조건**: `FormTypeRendererProps`를 받아 필드 그룹 래퍼 렌더링
- **요구사항**:
  - `depth` 기반 스타일링 (들여쓰기, 시각적 구분)
  - `object`/`array` 타입 구분 처리
  - 접근성 지원 (fieldset, legend 등)

#### FormLabel

- **조건**: `name`, `path`, `required` 정보로 라벨 생성
- **요구사항**:
  - `htmlFor` 연결 구현
  - 필수 필드 시각적 표시 (`*` 또는 라이브러리 표준)
  - 라벨 우선순위: `jsonSchema.label` > `jsonSchema.title` > `name`

#### FormInput

- **조건**: `Input` 컴포넌트를 래핑하여 렌더링
- **요구사항**: 단순 패스스루 래퍼 (추가 로직 없음)

#### FormError

- **조건**: `errorMessage`를 UI에 표시
- **요구사항**: 라이브러리의 에러 표시 컨벤션 준수

#### formatError

- **조건**: `JsonSchemaError` 객체를 ReactNode로 변환
- **요구사항**:
  - 다국어 지원 고려
  - 사용자 친화적 메시지 변환

### 2. FormTypeInput 컴포넌트 조건

각 FormTypeInput은 다음 조건을 만족해야 합니다:

#### 공통 조건

- **타입 준수**: `FormTypeInputProps<ValueType, Context>` 확장
- **test 함수**: 정확한 매핑 조건 구현
- **비제어 우선**: `defaultValue` 패턴 우선 사용
- **접근성**: ARIA 속성, 키보드 네비게이션 지원
- **에러 상태**: `errors` props 기반 에러 표시

#### 개별 컴포넌트 구체적 타입 요구사항

**⚠️ 컴포넌트 순서의 중요성**: formTypeInputDefinitions 배열에서 더 구체적인 조건의 컴포넌트가 앞에 와야 합니다.

**권장 순서**: 특수 조건 (format + formType) → 중간 조건 (format 또는 formType) → 일반 조건 (type만)

**FormTypeInputString**

- **타입**: `FormTypeInputPropsWithSchema<string, StringSchema, Context>`
- **매핑 조건**: `{ type: 'string' }` (가장 일반적인 조건이므로 **마지막 순서**에 배치)
- **특수 처리**: `format === 'password'` 시 패스워드 입력 모드
- **구현 패턴**: 기본 TextField, format별 type 변경

**FormTypeInputNumber**

- **타입**: `FormTypeInputPropsWithSchema<number, NumberSchema, Context>`
- **매핑 조건**: `{ type: ['number', 'integer'] }` (일반적인 조건이므로 **뒤쪽 순서**에 배치)
- **특수 처리**: 숫자 검증, min/max/step 지원

**FormTypeInputBoolean**

- **타입**: `FormTypeInputPropsWithSchema<boolean, BooleanSchema, Context>`
- **매핑 조건**: `{ type: 'boolean' }` (일반적인 조건이므로 **뒤쪽 순서**에 배치)
- **특수 처리**: indeterminate 상태 지원

**FormTypeInputStringEnum**

- **타입**: `FormTypeInputPropsWithSchema<string | string[], EnumSchema, Context>`
- **매핑 조건**: 함수 형태 (복합 조건)
  ```tsx
  test: ({ type, jsonSchema }: Hint) =>
    (type === "string" && jsonSchema.enum && jsonSchema.enum.length > 0) ||
    (type === "array" &&
      jsonSchema.items?.type === "string" &&
      jsonSchema.items?.enum);
  ```
- **순서**: 중간 (string 타입이지만 enum 조건 추가)

**FormTypeInputTextarea**

- **타입**: `FormTypeInputPropsWithSchema<string, StringSchema, Context>`
- **매핑 조건**: `{ type: 'string', format: 'textarea' }` 또는 `{ type: 'string', formType: 'textarea' }`
- **순서**: **앞쪽** (string 타입 + 추가 조건)

**FormTypeInputPassword** (예시)

- **타입**: `FormTypeInputPropsWithSchema<string, StringSchema, Context>`
- **매핑 조건**: `{ type: 'string', format: 'password' }`
- **순서**: **앞쪽** (string 타입 + format 조건)

**FormTypeInputSlider**

- **타입**: `FormTypeInputPropsWithSchema<number, NumberSchema, Context>`
- **매핑 조건**: `{ type: ['number', 'integer'], formType: 'slider' }`
- **순서**: **앞쪽** (number 타입 + formType 조건)

**FormTypeInputArray** ⚠️

- **타입**: `FormTypeInputPropsWithSchema<any[], ArraySchema, Context>`
- **매핑 조건**: `{ type: 'array' }`
- **순서**: 중간 (구조 컴포넌트로 특별 처리)
- **특수 사항**:
  - `ChildNodeComponents` 필수 사용
  - canard-form 인터페이스 준수
  - 추가/제거 버튼만 UI 스타일링

## 구현 가이드라인

### 1. UI 라이브러리 호환성 검증

다음 매핑 표를 작성하여 구현 가능성을 먼저 평가하세요:

| Schema Form 요구사항 | [UI_LIBRARY] 컴포넌트 | 호환성    | 구현 방식           | 우선순위 |
| -------------------- | --------------------- | --------- | ------------------- | -------- |
| 체크박스 (boolean)   | [Library]Checkbox     | ✅ 직접   | defaultChecked 사용 | 1        |
| 숫자 입력            | [Library]NumberInput  | ⚠️ 커스텀 | 숫자 검증 추가      | 2        |
| 날짜 선택            | [Library]DatePicker   | ❌ 없음   | Fallback 사용       | -        |

### 2. 프로젝트 구조 예시

```
src/
├── index.ts                    # 플러그인 메인 export
├── type.ts                     # Context 타입 정의
├── renderers/                  # 기본 렌더러
│   ├── FormGroup.tsx
│   ├── FormLabel.tsx
│   ├── FormInput.tsx
│   ├── FormError.tsx
│   └── formatError.ts
├── formTypeInputs/             # FormTypeInput 구현체
│   ├── FormTypeInputString.tsx
│   ├── FormTypeInputNumber.tsx
│   ├── FormTypeInputBoolean.tsx
│   ├── FormTypeInputArray.tsx  # 특수 처리
│   └── ...
└── utils/                      # 공통 유틸리티
    └── optimization.ts         # useHandle 등
```

### 3. 성능 최적화 체크리스트

- [ ] 비제어 컴포넌트 패턴 적용 (`defaultValue` 사용)
- [ ] `useMemo`로 props 연산 최적화
- [ ] `useHandle` 또는 `useCallback`으로 이벤트 핸들러 최적화
- [ ] 불필요한 context 구독 방지
- [ ] 조건부 렌더링 최적화

### 4. 테스트 전략

- **단위 테스트**: 각 컴포넌트의 매핑 조건 및 기본 동작
- **통합 테스트**: canard-form과의 호환성
- **성능 테스트**: 대용량 폼에서의 렌더링 성능
- **접근성 테스트**: 스크린 리더, 키보드 네비게이션

## 개발 절차

### Phase 1: 설계 및 검증 (1-2일)

1. UI 라이브러리 컴포넌트 매핑 분석
2. Context 타입 및 인터페이스 설계
3. 구현 우선순위 결정

### Phase 2: 기본 인프라 (2-3일)

1. 프로젝트 설정 및 의존성 설치
2. 타입 정의 및 기본 렌더러 구현
3. 빌드 및 테스트 환경 구성

### Phase 3: 핵심 컴포넌트 (3-5일)

1. **Priority 1**: String, Number, Boolean 입력 (일반 조건, 배열 **뒤쪽**에 배치)
2. **Priority 2**: 특수 format/formType 컴포넌트 (배열 **앞쪽**에 배치)
   - Textarea, Password, Date, Time 등
3. **Priority 3**: Array 구조 컴포넌트 (특수 처리)
4. **Priority 4**: Enum, Radio, Checkbox 등 선택 컴포넌트

### Phase 4: 고급 기능 및 문서화 (2-3일)

1. Slider, Switch 등 고급 입력 컴포넌트
2. **README.md 및 README-ko_kr.md 작성** (MUI plugin 형식 준수)
3. package.json 의존성 설정
4. 타입 정의 완성도 검증

### Phase 5: 최적화 및 검증 (1-2일)

1. 성능 최적화 적용 확인
2. 컴포넌트 순서 및 우선순위 검증
3. canard-form 통합 테스트
4. 빌드 및 타입 체크

## 사용 예시

```
새로운 UI 라이브러리 "Chakra UI v2"를 사용하여 @canard/schema-form의 플러그인을 개발하려고 합니다.

위의 아키텍처 가이드라인과 요구사항을 준수하여 개발 계획을 수립해주세요:

1. Chakra UI의 폼 관련 컴포넌트를 조사하고 호환성 매핑표를 작성해주세요
2. 비제어 컴포넌트 우선 정책에 따른 구현 방식을 제안해주세요
3. FormTypeInputArray의 특수 처리 방안을 포함한 구현 계획을 작성해주세요
4. 성능 최적화가 적용된 실제 코드 예시를 제공해주세요

[위의 모든 가이드라인과 체크리스트 포함]

```
